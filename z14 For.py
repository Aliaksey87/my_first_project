# ls = ["Папа", "Мама", "Я"]
# for x in ls:
#     print(x)

# ls2 = [1, 2, 3]
# sum = 0
# for x in ls2:
#     sum = sum + x
# print(sum)

# ls = [2, 4, 1, 8]
# for y in ls:
#     if y < 3:
#         continue
#     print(y)

# ls = [5, 6, 3, 3, 4, 4]
# for y in ls:
#     if y == 3:
#         break
#     print(y)

# 1. Написать функцию, которая принимает список чисел и возвращает их сумму.
ls = [5, 6, 3, 7, 4, 12]
sum = 0
for x in ls:
    sum = sum + x
# print(sum)
# исправленное
def ex_1(a):
    b = 0
    for x in a:
        b = b + x
    return b
# # print(ex_1([5, 6, 3, 7, 4, 12]))
# проверено

# 2. Написать функцию, которая принимает список чисел и возвращает список который содержит числа раздёленными на 2
# пример запуска:
# fn([4,5,6])
# [2, 2.5, 3]   # то что вернуло
def ex_2(a):
    b = []
    for x in a:
        y = x / 2
        b.append(y)
    return b
# print(ex_2([4, 5, 6, 17, 65, 88, 155.14]))
# проверено

# 3. Написать функцию, которая принимает список и возвращает его размер. Нельзя пользоваться len. Не делать с while!
def ex_3(a):
    y = 0
    for x in a:
        y = y + 1
    return y
# print(ex_3([4, 5, 6, 5, 3, 89, 6, 5, 3, 89, 6]))
# проверено


# # 4. Написать функцию, которая принимает список чисел и некоторое число
# # и возвращает True если число есть в списке, иначе возвращает False. Нельзя пользоваться in.
def ex_4(a, b):
    for x in a:
        # print(x, b)
        if x == b:
            # print(x, b)
            return 'YES'
    else:
            return 'NO'
# print(ex_4([4, 5, 6, 5, 3, 89, 6, 5, 3, 89, 6], 89))
# Тут else лучше не писать. else нужны для if-ов, не для for-ов

def ex_4(a, b):
    for x in a:
        # print(x, b)
        if x == b:
            # print(x, b)
            return 'YES'
    return 'NO'
# print(ex_4([4, 5, 6, 5, 3, 89, 6, 5, 3, 89, 6], 89))
# проверено

# 5. Написать функцию, которая принимает список чисел и возвращает среднее значение для этих чисел.
def ex_5(a):
    y = 0
    z = 0
    for x in a:
        y = y + x
        z = z + 1
    return y/z
# print('Среднее значание= ', ex_5([4, 5, 6, 5, 3, 89]))
# проверено

# 6. Написать функцию, которая принимает список чисел и возвращает максимальный элемент. Нельзя пользоваться функциями max\sort
def ex_6(a):
    y = 0
    for x in a:
        if x >= y:
            y = x
    return y
# print('Максимальный элемент в списке= ', ex_6([4, 5, 99, 5, 104, 3, 89]))
# проверено

# 7. Написать функцию, которая принимает список чисел и возвращает минимальный элемент. Нельзя пользоваться функциями min\sort
def ex_7(a):
    y = a[1]
    for x in a:
        if x <= y:
            y = x
    return y
# print('Минимальный элемент в списке= ', ex_7([4, 5, 99, 5, 2, 89]))
# проверено

# 8. Написать функцию, которая принимает список чисел и возвращает только чётные числа
def ex_8(a):
    b = []
    y = 0
    for x in a:
        if x%2 == 0:
            b.append(x)
    return b
# print(ex_8([4, 5, 88, 8, 3, 89, 0, -44, 44, 28, 17, 32, 22, 33, 100, 1000000, 1000002]))
# проверено

# 9. Написать функцию, которая принимает список чисел и возвращает только нечётные числа
def ex_9(a):
    b = []
    y = 0
    for x in a:
        if x%2 > 0:
            b.append(x)
    return b
# print(ex_9([4, 5, 88, 8, 3, -3, -89, 44, 28, 0, -17, 32, 22, 33, 100, 1000000, 1000002]))
# проверено

# 10. Написать функцию, которая принимает 2 списка чисел и возвращает их общие элементы.
# Пример вызова:
#  fn([1,2,3,4], [5,7, 2, 88, 3])
# [2, 3]
def ex_10(a,b):
    c = []
    for x in a:
        for y in b:
            if x == y:
                c.append(y)
    return c
# проверено

# 11. Написать функцию, которая принимает 2 списка чисел
# и убирает из первого списка те числа которые есть во втором списке.
def ex_11(a,b):
    c = []
    for x in a:
        if x not in b:
            c.append(x)
    return c
# print(ex_11([1,2,3,4, 17, -22], [5,7, 2, 88, 3, 17]))
# проверено коля помог


# 11.2 Написать функцию, которая принимает 2 числа а затем умножает их друг на друга. Нельзя пользоваться *.
# Подсказка: в python есть функция list(range(4)) которая вернёт список вида [0, 1, 2, 3]
def ex_112(x, y):
    c = 0
    a = x
    b = y
    for a in range(x):
        # print(x)
        for b in range(y):
            # print(x, y)
            c = c + 1
    return c
# print(ex_112(11, 7))
# проверено


# # 12. Написать функцию, которая принимает 2 числа x и y. Затем возводит x в степень y.
# #    Например если x = 4 а y = 3 то функция должна вернуть 64. Нельзя юзать ** (это оператор возведения в степень)
# # не знаю в каком направлении эту задачу делать. Подскажи
# ну например пусть x = 3 y = 4
# чтобы возвести x в степень y тебе нужно x умножить само на себя y раз
# тоесть    x * x * x * x
# ты можешь это сделать в цикле, который будет итерироваться y раз
def ex_12(x, y):
    c = 1
    for a in list(range(y)):
        c = c * x
    return c
# print('Результат возведения в степень', ex_12(4, 3))
# отправил на проверку

# 13. Написать функцию которая, печатает всю таблицу умножения от 1 до 10:
# 1 * 2 = 2
# 2 * 2 = 4
# 2 * 3 = 6
# ...
# 10 * 10 = 100
def ex_13(a, b):
    z = 0
    for x in range(a - 1):
        x = x + 1
        for y in range(b - 1):
            y = y + 1
            z = x * y
            print(x, ' * ', y, ' = ', z)
    return
# ex_13(10, 10)
# отправил на проверку

# 14. Написать функцию принимающую список чисел. Затем функция печатает первое
# число из списка на расстоянии в 3 пробела слева. Все остальные числа равняет
# по самой правой цифре из первого числа. Чтобы было так:
#    567
#      2
#     33
#      3
# Подсказка: чтобы распечатать 3 пробела + число 25 можно сделать так print(‘ ’ * 3  + str(25))
def ex_14(a):
    for x in a:
        y = len(str(x))
        y = 5 - y
        print(' '*y, x)
    return
# ex_14([5,7, 222, 21, 88, 3, 17])
# ex_14([5222323,7, 222, 21, 88, 3, 17])
# Если вызвать так
# ex_14([5222323,7, 222, 21, 88, 3, 17])
# то первое число вылазит слишком вправо
# нужно доделать
def ex_14(a):
    y = a[0]
    for x in a:
        if x > y:
            y = x
    z = len(str(y)) + 2                        # количество знаков в самом большом числе + 3 пробела
    for x in a:
        q = len(str(x))
        q = z - q
        print(' '*q, x)
    return
# ex_14([7, 222, 3, 17, 5222323, 7, 222])
# проверено




# 15. Написать функцию тренажёр таблицы умножения. После её запуска у
# человека спрашивается 2 числа, а затем их произведение. Если человек
# ответил правильно ему засчитывается очко. Если человек в любое число ввёл -1
# то программа останавливается. Использовать while (в презентации после for)
#
# Пример запуска:
#
# У вас 0 очков.

# Введите первое число: 5
# Введите второе число: 7
# Сколько будет 5 * 7 ?: 35
# Верно.
# У вас 1 очков.

# Введите первое число: 2
# Введите второе число: 2
# Сколько будет 2 * 2 ?: 92
# Неверно.
# У вас 1 очков.

# Введите первое число: -1
# Пока.

def ex_15():
    print('У вас 0 очков.')
    i = 0                                                             # очки в начале
    for a in range(100):
        x = int(input('Введите первое число: '))
        if x == -1:                                                   # проверка x
            return print('Пока')
        else:
            y = int(input('Введите второе число: '))
            if y == -1:                                               # проверка y
                return print('Пока')
            else:
                print('Сколько будет ', x, '*', y, '?')
                z1 = int(input(':'))
                if z1 == -1:                                          # проверка результата
                    return print('Пока')
                else:
                    z = x * y
                    if z == z1:
                        print('Верно.')
                        i = i + 1                                     # добавляем в очко
                        print('У вас ', i, 'очков.')
                    else:
                        print('Неверно.')
                        i = i - 1                                     # убираем в очко
                        print('У вас ', i, 'очков.')
    return
# ex_15()
# Всё верно, но можно упростить так например:
def ex_15():
    i = 0                                                             # очки в начале
    for a in range(100):
        print('У вас ', i, 'очков.')
        x = int(input('Введите первое число: '))
        y = int(input('Введите второе число: '))
        z1 = input('Сколько будет ' + str(x) + '*' + str(y) + '? :')
        if -1 in [x, y, z]:
            print('Пока')
            break
        else:
            z = x * y
            if z == z1:
                print('Верно.')
                i = i + 1                                     # добавляем в очко
            else:
                print('Неверно.')
                i = i - 1                                     # убираем в очко

# ex_15()
# проверено

# 16. Написать функцию принимающую список чисел и возвращающую максимальное и второе после максимального число.
# Нельзя пользоваться max\sort
# def ex_16(a):
#     y = 0
#     z = 0
#     for x in a:
#         z = z + 1
#         if x >= y:
#             y = x
#             t = z                        # индекс следующего за самым большим
#     print(y)                             # самое большое
#     print(a[t])                          # второе после максимального числa
#     return #(y, a[z])
# ex_16([5,7, 222, 77, 21, 223, 3, 17])
# тут ты немного задачу недопонял.
# имелось ввиду если на входе список
# [3, 6, 2, 7]
# то на выходе выдать должно
# [7, 6]
# поскольку 7 максимальное число, а 6 стоит на втором месте по максимальности после 7

def ex_16(a):
    y = []
    y1 = 0
    for x in a:
        if x > y1:
            y1 = x
            y.append(x)
    print(y[-1], y[-2])
    return y
# ex_16([5,7, 222, 77, 21, 223, 3, 17])
# проверено


# 17. Написать функцию принимающую число и рисующую квадрат размером с это число.
# Пример:
# fn(4)
# ****
# ****
# ****
# ****
#
# # Подсказка, чтобы создать строку с 3-мя звёздочками, можно сделать так: '*' * 3
# def ex_17(x):
#     y = x
#     for x in range(x):
#         print('*' * y)
# ex_17(7)
# проверено


# 18. Написать функцию принимающую число и рисующую рамку размером с это число.
# Пример:
# fn(4)
# ****
# *   *
# *   *
# ****
# def ex_18(x):
#     y = x-2
#     z = x
#     print('*' * (x+2))
#     for x in range(y):
#         print('*', ' '*y, '*')
#     print('*' * (z+2))
# ex_18(7)
# рисует букву D английскую
#
# *******
# *       *
# *       *
# *       *
# *       *
# *       *
# *******
#
# а должно
#
# *********
# *       *
# *       *
# *       *
# *       *
# *       *
# *********
# проверено


# 19. Написать функцию принимающую число и рисующую шахматную доску размером с это число.
# Пример:
# fn(4)
# * * * *
#  * * * *
# * * * *
#  * * * *
# def ex_19(x):
#     y = x
#     for x in range(x):
#         if x%2 > 0:
#             print('', '* ' * y)
#         else:
#             print('* ' * y)
#     return
# ex_19(5)
# не проверено


# 20. Написать функцию, которая принимает 2 числа, первое должно быть меньше второго, затем выводит все числа кратные 2-м между этими числами
# Пример:
# fn(3, 15)
# 4
# 6
# 8
# 10
# 12
# 14
# def ex_20(x, y):
#     z = x
#     for x in range(y+1):
#         # print(x)
#         if x > z and x%2 == 0:
#             print(x)
#     return
# ex_20(3, 15)
# проверено


# 21. Написать функцию принимающую число и вычисляющую его факториал.
# Факториал числа 5 = 1 * 2 * 3 * 4 * 5. Нельзя юзать math.factorial
# def ex_21(a):
#     x = 1
#     y = 1
#     for a in range(a):
#         y = y * x
#         x = x + 1
#     return y
# print(ex_21(5))
# проверено


# 22. Написать функцию которая принимает 3 переменные:
#   1. Сумма которую хотят положить на депозит
#   2. На сколько процентов будет увеличиватся сумма в месяц на депозите
#   3. Сколько месяцев планируют держать сумму в депозите.
# Функция должна возвращать накопленную сумму по прошествии времени.
# Например если депозит 50% а изначальная сумма 40 руб, держать планируют 3 месяца то:
# сумма на начало месяца | сумма на конец месяца
# 40                                       | 60
# 60                                       | 90
# 90                                       | 135
# В этом случае должно вернуть 135.
# def ex_22():
#     x = int(input('1. Сумма которую хотят положить на депозит: '))
#     y = int(input('2. На сколько процентов будет увеличиватся сумма в месяц на депозите: '))
#     z = int(input('3. Сколько месяцев планируют держать сумму в депозите: '))
#     # print(x, y, z)
#     print('Сумма на начало месяца | Сумма на конец месяца')
#     for z in range(z):
#         print(x, '|', (x * y *0.01)+x)
#         x = x + (x * y *0.01)
#     return
# # ex_22()
# проверено

# 23. Написать функцию которая принимает число и если число является простым то возвращает True иначе False.
# Число является простым если оно делится без остатка только на себя и на 1.
# Например число 7 является простым.

# так шестёрка делится на 2. 7 не делится. 13 тоже. поэтому они простые.
# простые это те, которые деляться ТОЛЬКО  на себя и 1. больше ни на что
# 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43
def ex_23(x):
    w = 0
    y = x
    for x in range(1, x+1):
        q = y%x
        if q == 0:
            w = w + 1
    if w == 2:
        return 'True'
    else:
        return 'False'
# print(ex_23(4))
# проверено


# 24. Написать функцию принимающую число и рисующую треугольник размером с это число.
# Например:
# fn(5)
# *
# **
# ***
# ****
# *****
def ex_24(x):
    for x in range(x):
        x = x + 1
        print('*'* x)
# ex_24(7)
# проверено


# 25.* Написать функцию принимающую число и рисующую ромб размером с это число.
# Например:
# fn(7)
#    *
#   ***
#  *****
# *******
#  *****
#   ***
#    *
# def ex_25(x):
#     x1 = x%2                                   # узнаем чётное или нет
#     if x1 == 0:                                # для чётных
#         z = int(x / 2)
#         q = 0
#         w = int(x / 2)
#         for z in range(z):
#             w = w - 1
#             q = q + 2
#             print(' '*w, '*'*q)
#         w = w + 1
#         q = x - 2
#         for z in range(z):
#             print(' '*w, '*'*q)
#             w = w + 1
#             q = q - 2
#     else:                                        # для не чётных
#         z = int((x - 1)/2)
#         z1 = int((x - 1)/2)
#         q = 1
#         w = z
#         for z in range(z):
#             print(' '*w, '*'*q, ' '*w)
#             q = q + 2
#             w = w - 1
#         print('', '*' * x)
#         for z1 in range(z1):
#             q = q - 2
#             w = w + 1
#             print(' '*w, '*'*q, ' '*w)
# ex_25(8)
# проверено



# 26.* Написать функцию которая принимает 2 дня в виде чисел и возвращает сколько между ними дней.
# Пример вызова: # fn(2020, 1, 26, 2020, 1, 21)  # вернёт 5
#  1:31, 2:28, 3:31,  4:30,  5:31,  6:30,
#  7:31, 8:31, 9:30, 10:31, 11:30, 12:31

# def ex_26(y1, m1, d1, y2, m2, d2):
#
#
#
# ex_26(2020, 1, 26, 2020, 1, 21)
#
#
#
#
# import datetime
# a = datetime.date.today()
# print(a)